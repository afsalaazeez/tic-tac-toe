// ********RoostGPT********
// Test generated by RoostGPT for test react-test-tic using AI Type Open AI and AI Model gpt-4-turbo-2024-04-09



// ********RoostGPT********
// Importing the calculateWinner function for testing
import calculateWinner from '../../../src/helpers/calculateWinner';

// Test suite for calculateWinner
describe('calculateWinner Function', () => {
    test('should return null if there is no winner', () => {
        const squares = Array(9).fill(null);
        expect(calculateWinner(squares)).toBe(null);
    });

    test('should return the winner if a row has identical non-null values', () => {
        const squares = ['X', 'X', 'X', null, null, null, null, null, null];
        expect(calculateWinner(squares)).toBe('X');
    });

    test('should return the winner if a column has identical non-null values', () => {
        const squares = ['O', null, null, 'O', null, null, 'O', null, null];
        expect(calculateWinner(squares)).toBe('O');
    });

    test('should return the winner if a diagonal has identical non-null values', () => {
        const squares = ['X', null, null, null, 'X', null, null, null, 'X'];
        expect(calculateWinner(squares)).toBe('X');
    });

    test('should handle arrays larger than 9 elements', () => {
        const squares = [...Array(12).fill(null)];
        squares[0] = squares[4] = squares[8] = 'Y';
        expect(calculateWinner(squares)).toBe('Y');
    });

    test('should return null for an invalid input (not an array)', () => {
        expect(calculateWinner("not an array")).toBe(null);
    });
});

