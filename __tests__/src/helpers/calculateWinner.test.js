// ********RoostGPT********
// Test generated by RoostGPT for test react-tic using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
import calculateWinner from '../../../src/helpers/calculateWinner';

describe('calculateWinner', () => {
    test('should return "X" if player "X" has won on the top row', () => {
        const squares = ['X', 'X', 'X', 'O', null, 'O', null, null, null];
        expect(calculateWinner(squares)).toBe('X');
    });

    test('should return "O" if player "O" has won on the first column', () => {
        const squares = ['O', 'X', 'X', 'O', 'X', null, 'O', null, null];
        expect(calculateWinner(squares)).toBe('O');
    });

    test('should return "X" if player "X" has won on a diagonal', () => {
        const squares = ['X', 'O', 'O', null, 'X', 'O', null, null, 'X'];
        expect(calculateWinner(squares)).toBe('X');
    });

    test('should return null when there is no winner', () => {
        const squares = ['X', 'X', 'O', 'O', 'O', 'X', 'X', 'O', 'X'];
        expect(calculateWinner(squares)).toBeNull();
    });

    test('should return null when the board is empty', () => {
        const squares = [null, null, null, null, null, null, null, null, null];
        expect(calculateWinner(squares)).toBeNull();
    });

    test('should handle scenarios where the game board is not yet completely filled and there is no winner', () => {
        const squares = ['X', null, 'O', 'O', 'X', null, null, null, null];
        expect(calculateWinner(squares)).toBeNull();
    });
});

