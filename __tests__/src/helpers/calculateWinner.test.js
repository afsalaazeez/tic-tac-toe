// ********RoostGPT********
// Test generated by RoostGPT for test react-test-tic-cli using AI Type Open AI and AI Model gpt-4-turbo-2024-04-09



// ********RoostGPT********
const calculateWinner = require('../../../src/helpers/calculateWinner');

describe('calculateWinner Function', () => {
    test('should return the winner if there is a complete line', () => {
        const squares = ['X', 'X', 'X', null, null, null, null, null, null];
        const winner = calculateWinner(squares);
        expect(winner).toBe('X');
    });

    test('should return null if there is no winner', () => {
        const squares = ['X', 'O', 'X', 'X', 'O', 'O', null, null, null];
        const winner = calculateWinner(squares);
        expect(winner).toBeNull();
    });

    test('should handle incomplete game where all squares are not yet filled', () => {
        const squares = ['X', 'O', 'X', null, 'O', 'X', null, null, 'O'];
        const winner = calculateWinner(squares);
        expect(winner).toBeNull();
    });

    test('should detect winner in a backward diagonal', () => {
        const squares = [null, null, 'O', null, 'O', null, 'O', null, null];
        const winner = calculateWinner(squares);
        expect(winner).toBe('O');
    });

    test('should return null for an empty board', () => {
        const squares = Array(9).fill(null);
        const winner = calculateWinner(squares);
        expect(winner).toBeNull();
    });
});

