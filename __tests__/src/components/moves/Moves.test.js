// ********RoostGPT********
// Test generated by RoostGPT for test react-tic using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
import React from 'react';
import { render, fireEvent } from '@testing-library/react';
import Moves from '../../../../src/components/moves/Moves';

describe('Moves Component', () => {
  const mockJumpTo = jest.fn();

  afterEach(() => {
    // Resets the mock function's state for each test
    mockJumpTo.mockReset();
  });

  test('renders without crashing', () => {
    const { getByText } = render(<Moves history={[]} jumpTo={mockJumpTo} />);
    expect(getByText('Go to game start')).toBeInTheDocument();
  });

  test('renders the correct number of moves based on history prop', () => {
    const history = [{}, {}, {}]; // Mock history with 3 steps
    const { getAllByRole } = render(<Moves history={history} jumpTo={mockJumpTo} />);
    expect(getAllByRole('button').length).toBe(3);
  });

  test('calls jumpTo with the correct move index when a button is clicked', () => {
    const history = [{}, {}, {}]; // Mock history with 3 steps
    const { getAllByRole } = render(<Moves history={history} jumpTo={mockJumpTo} />);
    const buttons = getAllByRole('button');
    fireEvent.click(buttons[1]); // Click on the second button
    expect(mockJumpTo).toHaveBeenCalledWith(1);
  });

  test('displays the correct description for moves', () => {
    const history = [{}, {}, {}]; // Mock history with 3 steps
    const { getByText } = render(<Moves history={history} jumpTo={mockJumpTo} />);
    expect(getByText('Go to move #1')).toBeInTheDocument();
    expect(getByText('Go to move #2')).toBeInTheDocument();
  });

  test('checks button text for the initial move', () => {
    const { getByText } = render(<Moves history={[{}]} jumpTo={mockJumpTo} />);
    expect(getByText('Go to game start')).toBeInTheDocument();
  });

  test('handles empty history prop', () => {
    const { queryByText } = render(<Moves history={[]} jumpTo={mockJumpTo} />);
    expect(queryByText('Go to move #')).not.toBeInTheDocument();
  });
});

