// ********RoostGPT********
// Test generated by RoostGPT for test react-tic using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
import React from 'react';
import { render, cleanup, fireEvent } from '@testing-library/react';
import Moves from '../../../src/components/moves/Moves';

// Cleanup after each test case
afterEach(cleanup);

describe('Moves component', () => {
  const mockJumpTo = jest.fn();
  const history = [{ squares: Array(9).fill(null) }, { squares: ['X', ...Array(8).fill(null)] }];

  test('renders without crashing', () => {
    const { getByText } = render(<Moves history={history} jumpTo={mockJumpTo} />);
    expect(getByText('Go to game start')).toBeInTheDocument();
  });

  test('displays list of moves based on history', () => {
    const { getAllByRole } = render(<Moves history={history} jumpTo={mockJumpTo} />);
    const buttons = getAllByRole('button');
    expect(buttons.length).toBe(history.length);
  });

  test('calls jumpTo with correct move index on button click', () => {
    const { getAllByRole } = render(<Moves history={history} jumpTo={mockJumpTo} />);
    const buttons = getAllByRole('button');
    
    fireEvent.click(buttons[1]);
    
    expect(mockJumpTo).toHaveBeenCalledWith(1);
  });

  test('renders correct description for each move', () => {
    const { getByText } = render(<Moves history={history} jumpTo={mockJumpTo} />);

    expect(getByText('Go to game start')).toBeInTheDocument();
    expect(getByText('Go to move #1')).toBeInTheDocument();
  });

  // Include additional test cases as necessary...
});

