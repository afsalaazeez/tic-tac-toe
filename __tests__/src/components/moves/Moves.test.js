// ********RoostGPT********
// Test generated by RoostGPT for test react-test-tic using AI Type Open AI and AI Model gpt-4-turbo-2024-04-09



// ********RoostGPT********
import React from 'react';
import { render, fireEvent } from '@testing-library/react';
import Moves from '../../../../src/components/moves/Moves';
import '@testing-library/jest-dom/extend-expect';

// Simulating a basic game history for testing
const mockHistory = [{board: ['X', null, null, null, 'X', 'O', null, null, null]}, {board: ['X', 'O', null, null, 'X', 'O', null, null, null]}];
const jumpToMock = jest.fn();

describe('Moves component tests', () => {
  test('renders without crashing', () => {
    const { getByText } = render(<Moves history={mockHistory} jumpTo={jumpToMock} />);
    expect(getByText('Go to move #1')).toBeInTheDocument();
  });

  test('should display correct number of buttons for history entries', () => {
    const { getAllByRole } = render(<Moves history={mockHistory} jumpTo={jumpToMock} />);
    expect(getAllByRole('button')).toHaveLength(mockHistory.length + 1); // +1 for 'Go to game start'
  });

  test('calls jumpTo with correct move index when button is clicked', () => {
    const { getAllByRole } = render(<Moves history={mockHistory} jumpTo={jumpToMock} />);
    const buttons = getAllByRole('button');
    fireEvent.click(buttons[1]); // Clicks the "Go to move #1" button
    expect(jumpToMock).toHaveBeenCalledWith(1);
  });

  test('displays "Go to game start" for initial button', () => {
    const { getByText } = render(<Moves history={mockHistory} jumpTo={jumpToMock} />);
    expect(getByText('Go to game start')).toBeInTheDocument();
  });

  afterEach(() => {
    jumpToMock.mockClear();
  });
});

