// ********RoostGPT********
// Test generated by RoostGPT for test react-tic using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
import React from 'react';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import GameInfo from '../../../../src/components/game-info/GameInfo'; // Relative path from the test directory

describe('GameInfo Component', () => {
  test('renders Player X message when xIsNext is true and there is no winner', () => {
    const props = { status: '', winner: null, xIsNext: true }; // Set props for this scenario
    const { getByText } = render(<GameInfo {...props} />);
    expect(getByText("It's your turn, player X")).toBeInTheDocument();
  });

  test('renders Player O message when xIsNext is false and there is no winner', () => {
    const props = { status: '', winner: null, xIsNext: false }; // Set props for this scenario
    const { getByText } = render(<GameInfo {...props} />);
    expect(getByText("Now you, player O!")).toBeInTheDocument();
  });

  test('renders Winner X message when there is a winner and status is "Winner: X"', () => {
    const props = { status: 'Winner: X', winner: 'X', xIsNext: false }; // Set props for this scenario
    const { getByText } = render(<GameInfo {...props} />);
    expect(getByText("Nice! I won!")).toBeInTheDocument();
  });

  test('renders Winner O message when there is a winner and status is not "Winner: X"', () => {
    const props = { status: 'Winner: O', winner: 'O', xIsNext: false }; // Set props for this scenario
    const { getByText } = render(<GameInfo {...props} />);
    expect(getByText("Wohoo! I made it!")).toBeInTheDocument();
  });

  test('renders an image with the correct alt text', () => {
    render(<GameInfo status="" winner={null} xIsNext />);
    const image = screen.getByAltText("Player X and Player O");
    expect(image).toBeInTheDocument();
  });
});


