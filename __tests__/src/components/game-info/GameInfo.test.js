// ********RoostGPT********
// Test generated by RoostGPT for test react-tic using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
import React from 'react';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import GameInfo from '../../../src/components/game-info/GameInfo';

describe('GameInfo Component', () => {
  test('displays "It\'s your turn, player X" when xIsNext is true and there is no winner', () => {
    render(<GameInfo xIsNext={true} winner={null} status={null} />);
    expect(screen.getByText("It's your turn, player X")).toBeInTheDocument();
  });

  test('displays "Now you, player O!" when xIsNext is false and there is no winner', () => {
    render(<GameInfo xIsNext={false} winner={null} status={null} />);
    expect(screen.getByText("Now you, player O!")).toBeInTheDocument();
  });

  test('displays "Nice! I won!" when there is a winner and status is "Winner: X"', () => {
    render(<GameInfo winner={true} status={'Winner: X'} xIsNext={false} />);
    expect(screen.getByText("Nice! I won!")).toBeInTheDocument();
  });

  test('displays "Wohoo! I made it!" when there is a winner and status is not "Winner: X"', () => {
    render(<GameInfo winner={true} status={'Winner: O'} xIsNext={true} />);
    expect(screen.getByText("Wohoo! I made it!")).toBeInTheDocument();
  });
  
  // Additional test cases can be added here to cover more scenarios, including edge cases or error handling.
});

