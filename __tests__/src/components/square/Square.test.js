// ********RoostGPT********
// Test generated by RoostGPT for test react-test-tic-cli using AI Type Open AI and AI Model gpt-4-turbo-2024-04-09



// ********RoostGPT********
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import Square from '../../../../src/components/square/Square';

describe('Square component', () => {
  test('renders the button with provided text', () => {
    render(<Square value="X" onClick={() => {}} />);
    const buttonElement = screen.getByRole('button', { name: /X/i });
    expect(buttonElement).toBeInTheDocument();
  });

  test('calls onClick prop when clicked', () => {
    const mockOnClick = jest.fn();
    render(<Square value="X" onClick={mockOnClick} />);
    const buttonElement = screen.getByRole('button', { name: /X/i });
    fireEvent.click(buttonElement);
    expect(mockOnClick).toHaveBeenCalledTimes(1);
  });

  test('updates the button text when value prop changes', () => {
    const { rerender } = render(<Square value="X" onClick={() => {}} />);
    const buttonElement = screen.getByRole('button', { name: /X/i });
    rerender(<Square value="O" onClick={() => {}} />);
    expect(buttonElement).toHaveTextContent('O');
  });

  test('does not call onClick if button already clicked', () => {
    const mockOnClick = jest.fn();
    render(<Square value="X" onClick={mockOnClick} />);
    const buttonElement = screen.getByRole('button', { name: /X/i });
    fireEvent.click(buttonElement); // First click
    fireEvent.click(buttonElement); // Second click
    expect(mockOnClick).toHaveBeenCalledTimes(1); // Should still be called only once
  });
});

