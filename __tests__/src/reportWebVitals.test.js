// ********RoostGPT********
// Test generated by RoostGPT for test react-tic using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
import reportWebVitals from '../../src/reportWebVitals';

// Mocking the web-vitals import
jest.mock('web-vitals', () => ({
  getCLS: jest.fn(),
  getFID: jest.fn(),
  getFCP: jest.fn(),
  getLCP: jest.fn(),
  getTTFB: jest.fn(),
}));

describe('reportWebVitals Tests', () => {

  // Common setup for all tests
  let webVitals;
  beforeEach(() => {
    webVitals = require('web-vitals');
  });

  // Success Case
  test('it should execute web vitals functions when onPerfEntry is a function', async () => {
    const onPerfEntry = jest.fn();
    reportWebVitals(onPerfEntry);
    expect(onPerfEntry).not.toHaveBeenCalled(); // onPerfEntry will be called asynchronously
    await Promise.resolve(); // Simulate waiting for the web vitals promises to resolve
    expect(webVitals.getCLS).toHaveBeenCalledWith(onPerfEntry);
    expect(webVitals.getFID).toHaveBeenCalledWith(onPerfEntry);
    expect(webVitals.getFCP).toHaveBeenCalledWith(onPerfEntry);
    expect(webVitals.getLCP).toHaveBeenCalledWith(onPerfEntry);
    expect(webVitals.getTTFB).toHaveBeenCalledWith(onPerfEntry);
  });

  // Failure Case
  test('it should not execute web vitals functions when onPerfEntry is not a function', () => {
    const onPerfEntry = 'not-a-function';
    reportWebVitals(onPerfEntry);
    expect(webVitals.getCLS).not.toHaveBeenCalled();
    expect(webVitals.getFID).not.toHaveBeenCalled();
    expect(webVitals.getFCP).not.toHaveBeenCalled();
    expect(webVitals.getLCP).not.toHaveBeenCalled();
    expect(webVitals.getTTFB).not.toHaveBeenCalled();
  });

  // Edge Case
  // More tests can be added here, if necessary, to handle possible edge cases 
});


