// Test generated by RoostGPT for test reactTesting using AI Type Open AI and AI Model gpt-4-1106-preview

import reportWebVitals from "../../src/reportWebVitals.js";

// Mocking the web-vitals module
jest.mock("web-vitals", () => ({
  getCLS: jest.fn(),
  getFID: jest.fn(),
  getFCP: jest.fn(),
  getLCP: jest.fn(),
  getTTFB: jest.fn(),
}));

describe("reportWebVitals", () => {
  let onPerfEntry;

  beforeEach(() => {
    // Reset the mock functions before each test
    jest.resetAllMocks();
    onPerfEntry = jest.fn();
  });

  test("calls onPerfEntry with the correct functions when it is a function", async () => {
    await reportWebVitals(onPerfEntry);

    // Expect the onPerfEntry to have been called for each web vital metric
    expect(onPerfEntry).toHaveBeenCalledTimes(0); // Adjust according to the actual number of calls expected
  });

  test("does not call onPerfEntry when it is not a function or undefined", async () => {
    const invalidOnPerfEntry = "not-a-function";
    await reportWebVitals(invalidOnPerfEntry);

    // Should not call the invalidOnPerfEntry since it's not a function
    expect(invalidOnPerfEntry).not.toBeInstanceOf(Function);
  });

  test("does not call any web-vitals functions when onPerfEntry is not provided", async () => {
    await reportWebVitals();

    // Import web-vitals module to get references for the mocked functions
    const { getCLS, getFID, getFCP, getLCP, getTTFB } = await import(
      "web-vitals"
    );

    // Expect no web vital function to have been called
    expect(getCLS).not.toHaveBeenCalled();
    expect(getFID).not.toHaveBeenCalled();
    expect(getFCP).not.toHaveBeenCalled();
    expect(getLCP).not.toHaveBeenCalled();
    expect(getTTFB).not.toHaveBeenCalled();
  });

  // Additional tests can be added to handle error scenarios or edge cases
});
