// ********RoostGPT********
// Test generated by RoostGPT for test react-test-tic using AI Type Open AI and AI Model gpt-4-turbo-2024-04-09



// ********RoostGPT********
import reportWebVitals from '../../src/reportWebVitals';

describe('reportWebVitals utility function', () => {
    beforeAll(() => {
        jest.resetModules();
        jest.mock('web-vital', () => ({
            getCLS: jest.fn(),
            getFID: jest.fn(),
            getFCP: jest.fn(),
            getLCP: jest.fn(),
            getTTFB: jest.fn()
        }));
    });

    test('should not call any web vitals function if onPerfEntry is not a function', () => {
        const onPerfEntry = 'not-a-function';
        reportWebVitals(onPerfEntry);
        expect(require('web-vitals').getCLS).not.toHaveBeenCalled();
        expect(require('web-vitals').getFID).not.toHaveBeenCalled();
        expect(require('web-vitals').getFCP).not.toHaveBeenCalled();
        expect(require('web-vitals').getLCP).not.toHaveBeenCalled();
        expect(require('web-vitals').getTTFB).not.toHaveBeenCalled();
    });
    
    test('should call all web vitals functions if onPerfEntry is a function', async () => {
        const onPerfEntry = jest.fn();
        await reportWebVitals(onPerfEntry);
        expect(require('web-vitals').getCLS).toHaveBeenCalledWith(onPerfEntry);
        expect(require('web-vitals').getFID).toHaveBeenCalledWith(onPerfEntry);
        expect(require('web-vitals').getFCP).toHaveBeenCalledWith(onPerfEntry);
        expect(require('web-vitals').getLCP).toHaveBeenCalledWith(onPerfEntry);
        expect(require('web-vitals').getTTFB).toHaveBeenCalledWith(onPerfEntry);
    });

    afterEach(() => {
        jest.clearAllMocks();
    });
});

