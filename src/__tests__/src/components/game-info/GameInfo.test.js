// ********RoostGPT********
// Test generated by RoostGPT for test react-tic using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
import React from 'react';
import { render, screen } from '@testing-library/react';
import GameInfo from '../../../components/game-info/GameInfo';

describe('GameInfo component', () => {
  // Test when it's player X's turn and there is no winner
  test('displays player X turn message when xIsNext is true and no winner', () => {
    render(<GameInfo status={null} winner={null} xIsNext={true} />);
    expect(screen.getByText("It's your turn, player X")).toBeInTheDocument();
  });

  // Test when it's player O's turn and there is no winner
  test('displays player O turn message when xIsNext is false and no winner', () => {
    render(<GameInfo status={null} winner={null} xIsNext={false} />);
    expect(screen.getByText("Now you, player O!")).toBeInTheDocument();
  });

  // Test when there is a winner and it's player X
  test('displays player X win message when winner is X', () => {
    render(<GameInfo status="Winner: X" winner="X" xIsNext={false} />);
    expect(screen.getByText("Nice! I won!")).toBeInTheDocument();
  });

  // Test when there is a winner and it's player O
  test('displays player O win message when winner is O', () => {
    render(<GameInfo status="Winner: O" winner="O" xIsNext={true} />);
    expect(screen.getByText("Wohoo! I made it!")).toBeInTheDocument();
  });

  // Test if the image is rendered correctly
  test('renders image with correct alt text', () => {
    render(<GameInfo status={null} winner={null} xIsNext={true} />);
    expect(screen.getByAltText("Player X and Player O")).toBeInTheDocument();
  });
});

