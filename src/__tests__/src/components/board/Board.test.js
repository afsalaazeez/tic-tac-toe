// ********RoostGPT********
// Test generated by RoostGPT for test tic-tac-toe using AI Type Open AI and AI Model gpt-4-turbo-preview



// ********RoostGPT********
// src/__tests__/src/components/board/Board.test.js

import React from 'react';
import { render, fireEvent } from '@testing-library/react';
import Board from '../../../components/board/Board.js';
import Square from '../../../components/square/Square.js'; // Assuming Square is also a component

// Mock Square component to isolate test to Board component alone
jest.mock('../../../components/square/Square.js', () => {
  return ({ onClick, value }) => (
    <button data-testid="square" onClick={onClick}>
      {value}
    </button>
  );
});

describe('Board Component', () => {
  // Test case for rendering Board component correctly
  test('renders the correct number of Square components', () => {
    const squares = Array(9).fill(null);
    const { getAllByTestId } = render(<Board squares={squares} onClick={() => {}} jumpTo={() => {}} />);
    const squareComponents = getAllByTestId('square');
    expect(squareComponents.length).toBe(9); // Expecting 9 Square components for a 3x3 Tic-Tac-Toe board
  });

  // Test case for checking if onClick handler is called on Square component click
  test('calls onClick event handler when Square is clicked', () => {
    const squares = Array(9).fill(null);
    const mockOnClick = jest.fn();
    const { getAllByTestId } = render(<Board squares={squares} onClick={mockOnClick} jumpTo={() => {}} />);
    const squareComponents = getAllByTestId('square');
    
    // Simulate click on the first Square
    fireEvent.click(squareComponents[0]);
    expect(mockOnClick).toHaveBeenCalledWith(0); // Check if the onClick has been called with the right index
  });
});

