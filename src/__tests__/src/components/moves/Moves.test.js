// ********RoostGPT********
// Test generated by RoostGPT for test react-test-tic using AI Type Open AI and AI Model gpt-4-turbo-2024-04-09

// ********RoostGPT********
import React from "react";
import { render, cleanup, fireEvent } from "@testing-library/react";
import Moves from "../../../components/moves/Moves";

describe("Moves Component", () => {
  afterEach(cleanup);

  test("should render without crashing", () => {
    const { container } = render(<Moves history={[]} jumpTo={() => {}} />);
    expect(container).toBeTruthy();
  });

  test('should render "Go to game start" with empty history', () => {
    const { getByText } = render(<Moves history={[]} jumpTo={() => {}} />);
    expect(getByText("Go to game start")).toBeTruthy();
  });

  test("should correctly render moves from history", () => {
    const history = [{}, {}, {}]; // Represents three steps in history
    const { getAllByRole } = render(
      <Moves history={history} jumpTo={() => {}} />
    );
    const buttons = getAllByRole("button");
    expect(buttons.length).toBe(3);
    expect(buttons[1].textContent).toBe("Go to move #1");
    expect(buttons[2].textContent).toBe("Go to move #2");
  });

  test('should call "jumpTo" with correct argument when button clicked', () => {
    const jumpToMock = jest.fn();
    const history = [{}, {}];
    const { getAllByRole } = render(
      <Moves history={history} jumpTo={jumpToMock} />
    );
    const buttons = getAllByRole("button");

    // Simulate click on the second move button
    fireEvent.click(buttons[1]);
    expect(jumpToMock).toHaveBeenCalledWith(1);
  });
});
