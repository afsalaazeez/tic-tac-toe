// ********RoostGPT********
// Test generated by RoostGPT for test react-tic using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
import calculateWinner from '../../../helpers/calculateWinner.js';

describe('calculateWinner', () => {
  test('should return the winner if a player has won', () => {
    // Board setup where 'X' is the winner
    const squares = ['X', 'X', 'X', null, 'O', null, 'O', null, null];
    // Assert that calculateWinner identifies 'X' as the winner
    expect(calculateWinner(squares)).toBe('X');
  });

  test('should return null if there is no winner', () => {
    // Board setup with no winner
    const squares = ['X', 'O', 'X', 'X', 'O', 'O', null, null, null];
    // Assert that calculateWinner identifies no winner
    expect(calculateWinner(squares)).toBeNull();
  });

  test('should return the winner if a player has won on a different line', () => {
    // Board setup where 'O' is the winner on a diagonal
    const squares = ['O', 'X', null, 'X', 'O', null, null, 'X', 'O'];
    // Assert that calculateWinner identifies 'O' as the winner
    expect(calculateWinner(squares)).toBe('O');
  });

  test('should handle an empty board', () => {
    // An empty board setup
    const squares = [null, null, null, null, null, null, null, null, null];
    // Assert that calculateWinner handles an empty board
    expect(calculateWinner(squares)).toBeNull();
  });
});

