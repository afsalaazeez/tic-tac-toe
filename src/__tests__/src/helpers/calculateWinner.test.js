// ********RoostGPT********
// Test generated by RoostGPT for test react-test-tic using AI Type Open AI and AI Model gpt-4-turbo-2024-04-09



// ********RoostGPT********
import calculateWinner from '../../helpers/calculateWinner'; // Correct path from the test directory

describe('calculateWinner Utility Function', () => {
  // Test case for determining no winner yet
  test('should return null if there is no winner yet', () => {
    const squares = [null, null, null, null, null, null, null, null, null];
    const winner = calculateWinner(squares);
    expect(winner).toBeNull();
  });

  // Test case for success scenario where first row is all 'X'
  test('should return "X" as the winner when the first row is all X', () => {
    const squares = ['X', 'X', 'X', null, null, null, null, null, null];
    const winner = calculateWinner(squares);
    expect(winner).toBe('X');
  });

  // Test case for success scenario where diagonal is all 'O'
  test('should return "O" as the winner when diagonal is all O', () => {
    const squares = ['O', null, null, null, 'O', null, null, null, 'O'];
    const winner = calculateWinner(squares);
    expect(winner).toBe('O');
  });

  // Test case ensuring function handles input immutability
  test('should not mutate the input array', () => {
    const squares = [null, null, null, 'X', 'X', 'X', null, null, null];
    const squaresClone = [...squares];
    calculateWinner(squares);
    expect(squares).toEqual(squaresClone);
  });

  // Test case for diverse inputs with integers and undefined
  test('should handle incorrect inputs gracefully', () => {
    const squares = [undefined, undefined, undefined, 1, 1, 1, null, null, null];
    expect(() => calculateWinner(squares)).toThrow('Invalid square values');
  });
});

