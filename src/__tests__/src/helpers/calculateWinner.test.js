// ********RoostGPT********
// Test generated by RoostGPT for test react-test-tic using AI Type Open AI and AI Model gpt-4-turbo-2024-04-09



// ********RoostGPT********
import calculateWinner from '../../helpers/calculateWinner';

describe('calculateWinner function', () => {
  test('should return the winner on a fully occupied row', () => {
    const squaresFullRow = ['X', 'X', 'X', null, null, null, 'O', 'O', null];
    const winner = calculateWinner(squaresFullRow);
    // expects 'X' as the winner since the first row is fully occupied by 'X'
    expect(winner).toBe('X');
  });

  test('should return null if there is no winner', () => {
    const squaresNoWinner = ['X', 'O', 'X', 'X', 'O', 'O', 'O', 'X', 'X'];
    const winner = calculateWinner(squaresNoWinner);
    // expects null since no row, column, or diagonal has a single player winner
    expect(winner).toBeNull();
  });

  test('should return winner on a vertical line', () => {
    const squaresVerticalWin = [null, 'O', null, 'X', 'O', 'X', null, 'O', 'X'];
    const winner = calculateWinner(squaresVerticalWin);
    // expects 'O' as the winner on the second column
    expect(winner).toBe('O');
  });

  test('should return winner for a diagonal line', () => {
    const squaresDiagonalWin = ['O', 'X', null, 'X', 'O', 'X', 'O', null, null];
    const winner = calculateWinner(squaresDiagonalWin);
    // expects 'O' as the winner on the leading diagonal
    expect(winner).toBe('O');
  });
});

